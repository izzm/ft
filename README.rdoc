= FT for Ruby

This gem contains a library written in C to perform:

* Discrete Hartley Transform (DHT[http://en.enwikipedia.enwikipediaorg/wiki/Discrete_Hartley_transform]),
* Fast Hartley Transform (FHT),
* Discrete Fourier Transform (DFT[http://en.wikipedia.org/wiki/Discrete_Fourier_transform]),
* Fast Fourier Transform (FFT[http://en.wikipedia.org/wiki/Fast_Fourier_transform]).

The extension allows to do the transform in both directions. Moreover it allows also to do the transform for two dimensinal data.

== Instalation

To install the extension clone the repository on your machine:

  git clone git://github.com/placek/ft.git

build a gem:

  gem build ft.gemspec

and install it:

  gem install ft-*.gem

== Requirements

Data for Fourier transforms is an array of complex numbers. The length of data should be a power of 2 (otherwise FT methods will raise exeption).

Data for Hartley transforms is a set of complex numbers. Here the only restriction is a length of array - it should be a multiplication of 2.

== Usage

Import the FT gem:

  require "ft"

=== Fourier 1D data

Prepare some data to process:

  data = [Complex(2.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(2.0, 0.0)]

Make some data processing with FFT:

  result = data.fft # => [Complex(6.0, 0.0), Complex(1.0, 1.0), Complex(0.0, 0.0), Complex(1.0, -1.0)]
  result.rfft       # => [Complex(2.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(2.0, 0.0)]

And some data processing with DFT:

  result = data.dft # => [Complex(6.0, 0.0), Complex(1.0, 1.0), Complex(0.0, 0.0), Complex(1.0, -1.0)]
  result.rdft       # => [Complex(2.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(2.0, 0.0)]

=== Fourier 2D data

Prepare some data to process:

  data = [[Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0)],
          [Complex(1.0, 0.0), Complex(2.0, 0.0), Complex(2.0, 0.0), Complex(1.0, 0.0)],
          [Complex(1.0, 0.0), Complex(2.0, 0.0), Complex(2.0, 0.0), Complex(1.0, 0.0)],
          [Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0)]]

Make some data processing with FFT:

  result = data.fft2d # => [[Complex(20.0,  0.0), Complex(-2.0, -2.0), Complex( 0.0,  0.0), Complex(-2.0,  2.0)],
                      #     [Complex(-2.0, -2.0), Complex( 0.0,  2.0), Complex( 0.0,  0.0), Complex( 2.0,  0.0)],
                      #     [Complex( 0.0,  0.0), Complex( 0.0,  0.0), Complex( 0.0,  0.0), Complex( 0.0,  0.0)],
                      #     [Complex(-2.0,  2.0), Complex( 2.0,  0.0), Complex( 0.0,  0.0), Complex( 0.0, -2.0)]]
  result.rfft2d       # => [[Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0)],
                      #     [Complex(1.0, 0.0), Complex(2.0, 0.0), Complex(2.0, 0.0), Complex(1.0, 0.0)],
                      #     [Complex(1.0, 0.0), Complex(2.0, 0.0), Complex(2.0, 0.0), Complex(1.0, 0.0)],
                      #     [Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0)]]

And some data processing with DFT:

  result = data.dft2d # => [[Complex(20.0,  0.0), Complex(-2.0, -2.0), Complex( 0.0,  0.0), Complex(-2.0,  2.0)],
                      #     [Complex(-2.0, -2.0), Complex( 0.0,  2.0), Complex( 0.0,  0.0), Complex( 2.0,  0.0)],
                      #     [Complex( 0.0,  0.0), Complex( 0.0,  0.0), Complex( 0.0,  0.0), Complex( 0.0,  0.0)],
                      #     [Complex(-2.0,  2.0), Complex( 2.0,  0.0), Complex( 0.0,  0.0), Complex( 0.0, -2.0)]]
  result.rdft2d       # => [[Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0)],
                      #     [Complex(1.0, 0.0), Complex(2.0, 0.0), Complex(2.0, 0.0), Complex(1.0, 0.0)],
                      #     [Complex(1.0, 0.0), Complex(2.0, 0.0), Complex(2.0, 0.0), Complex(1.0, 0.0)],
                      #     [Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0)]]

=== Hartley 1D data

DHT:

  data = [Complex(2.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(2.0, 0.0)]
  result = data.dht  # => [Complex(3.0, 0.0), Complex(0.0, 0.0), Complex(0.0, 0.0), Complex(1.0, 0.0)]
  result.dht         # => [Complex(2.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(2.0, 0.0)]

FHT:

  data = [Complex(2.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(2.0, 0.0)]
  result = data.fht  # => [Complex(3.0, 0.0), Complex(0.0, 0.0), Complex(0.0, 0.0), Complex(1.0, 0.0)]
  result.fht         # => [Complex(2.0, 0.0), Complex(1.0, 0.0), Complex(1.0, 0.0), Complex(2.0, 0.0)]

=== Hartley 2D data

DHT:

  data = [[Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0)],
          [Complex( 1.0, 0.0), Complex( 2.0, 0.0), Complex( 2.0, 0.0), Complex( 1.0, 0.0)],
          [Complex( 1.0, 0.0), Complex( 2.0, 0.0), Complex( 2.0, 0.0), Complex( 1.0, 0.0)],
          [Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0)]]
  result = data.dht2d  # => [[Complex( 5.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex(-1.0, 0.0)],
                             [Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0)],
                             [Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0)],
                             [Complex(-1.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 1.0, 0.0)]]
  result.dht2d         # => [[Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0)],
                             [Complex( 1.0, 0.0), Complex( 2.0, 0.0), Complex( 2.0, 0.0), Complex( 1.0, 0.0)],
                             [Complex( 1.0, 0.0), Complex( 2.0, 0.0), Complex( 2.0, 0.0), Complex( 1.0, 0.0)],
                             [Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0)]]

FHT:

  data = [[Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0)],
          [Complex( 1.0, 0.0), Complex( 2.0, 0.0), Complex( 2.0, 0.0), Complex( 1.0, 0.0)],
          [Complex( 1.0, 0.0), Complex( 2.0, 0.0), Complex( 2.0, 0.0), Complex( 1.0, 0.0)],
          [Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0)]]
  result = data.fht2d  # => [[Complex( 5.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex(-1.0, 0.0)],
                             [Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0)],
                             [Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0)],
                             [Complex(-1.0, 0.0), Complex( 0.0, 0.0), Complex( 0.0, 0.0), Complex( 1.0, 0.0)]]
  result.fht2d         # => [[Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0)],
                             [Complex( 1.0, 0.0), Complex( 2.0, 0.0), Complex( 2.0, 0.0), Complex( 1.0, 0.0)],
                             [Complex( 1.0, 0.0), Complex( 2.0, 0.0), Complex( 2.0, 0.0), Complex( 1.0, 0.0)],
                             [Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0), Complex( 1.0, 0.0)]]

=== Magnitude

  data = [Complex(3.0, 4.0), Complex(1.0, 2.0), Complex(1.0, 1.0), Complex(2.0)]
  data.magnitude  # => [5.0, 2.23606797749979, 1.4142135623730951, 2.0]

=== Phase

  data = [Complex(0.0, 1.0), Complex(1.0, 1.0), Complex(1.0, 0.0),  Complex(1.0, -1.0)]
  data.phase  # => [0.0, 0.7853981633974483, 1.5707963267948966, 2.356194490192345]

=== Switching quarters of 2D data

  data = [[2.0, 1.0, 1.0, 2.0],
          [1.0, 1.0, 1.0, 1.0],
          [1.0, 1.0, 1.0, 1.0],
          [2.0, 1.0, 1.0, 2.0]]
  data.switch_quarters  # => [[1.0, 1.0, 1.0, 1.0],
                              [1.0, 2.0, 2.0, 1.0],
                              [1.0, 2.0, 2.0, 1.0],
                              [1.0, 1.0, 1.0, 1.0]]

(data should have equal both dimensions!)

== Credits

* Paweł Placzyński
* Jude Sutton
